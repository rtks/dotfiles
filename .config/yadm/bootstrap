#!/bin/bash

export -n GIT_DIR
export -n GIT_WORK_TREE

msg() {
  if [ "$1" = "-n" ]; then
    printf "\e[1m$2\e[m"
  else
    printf "\e[1m$1\e[m\n"
  fi
}

getc() {
  local save_state
  save_state="$(/bin/stty -g)"
  /bin/stty raw -echo
  IFS='' read -r -n 1 -d '' "$@"
  /bin/stty "${save_state}"
}

# Check dependencies
deps=""
if ! command -v curl >/dev/null 2>&1; then
  deps=$deps" curl"
fi
if ! command -v git >/dev/null 2>&1; then
  deps=$deps" git"
fi
if ! command -v yadm >/dev/null 2>&1; then
  deps=$deps" yadm"
fi
yadm=yadm
if [ -n "$deps" ]; then
  msg "The following packages are required to continue:"
  echo $deps

  # Check package manager
  if [ "$OS" = "Darwin" ]; then
    pkgmgr="brew install"
    if ! command -v brew >/dev/null 2>&1; then
      pkgmgr='/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'"; $pkgmgr"
    fi
  else
    if [ $(id -u) -ne 0 ]; then
      sudo="sudo -E "
    else
      sudo=""
    fi
    if command -v apt-get >/dev/null 2>&1; then
      pkgmgr="${sudo}apt-get update; ${sudo}apt-get -y install"
    elif command -v apk >/dev/null 2>&1; then
      pkgmgr="${sudo}apk add --no-cache"
    elif command -v dnf >/dev/null 2>&1; then
      pkgmgr="${sudo}dnf install -y"
    else
      exit 1 # Not found package manager
    fi
  fi

  msg "1. Install the packages with:"
  cmd[1]="$pkgmgr$deps"
  yadm[1]=yadm
  keys="1"
  printf "${cmd[1]}\n"
  if [[ "$deps" =~ " yadm" ]]; then
    if [ "$deps" = " yadm" ]; then
      msg "2. Use remotely yadm."
      cmd[2]=
    else
      msg "2. Install the minimum packages and use remotely yadm with:"
      cmd[2]="$pkgmgr${deps/ yadm/}"
      printf "${cmd[2]}\n"
    fi
    yadm[2]="curl -fsSL https://github.com/TheLocehiliosan/yadm/raw/master/yadm | bash -s --"
    keys="1-2"
  fi
  msg -n "Press $keys to continue with selected option, or other key to abort: "
  getc c
  echo
  [ "$c" != 1 -a "$c" != 2 ] && exit 1
  [ -z "${cmd[$c]}" -a -z "${yadm[$c]}" ] && exit 1
  msg "Installing packages"
  eval ${cmd[$c]}
  yadm="${yadm[$c]}"
  # Check dependencies
  deps=""
  if ! command -v curl >/dev/null 2>&1; then
    deps=$deps" curl"
  fi
  if ! command -v git >/dev/null 2>&1; then
    deps=$deps" git"
  fi
  if [ "$yadm" = "yadm" ] && ! command -v yadm >/dev/null 2>&1; then
    deps=$deps" yadm"
  fi
  if [ -n "$deps" ]; then
    msg "Failed to install$deps"
    exit 1
  fi
fi

if [ ! -d ~/.local/share/yadm/repo.git ]; then
  # Clone repository
  msg "Cloning repository"
  eval $yadm' clone --no-bootstrap "https://github.com/rtks/dotfiles.git"'
fi

# Bootstrap fish
if command -v fish >/dev/null 2>&1; then
  msg "Bootstraping fish"
  fish -c 'set_color_custom; set -U fish_greeting ""; fish_update_completions'

  # Install fisher
  if [ ! -f ~/.config/fish/functions/fisher.fish ]; then
    msg "Installing fisher"
    fish -l -c "curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher update"
  else
    msg "Bootstraping fisher"
    fish -l -c "fisher update"
  fi
else
  msg "fish not found. Skip bootstrap."
fi

# Bootstrap starship
if command -v zsh &>/dev/null || command -v fish &>/dev/null; then
  if ! command -v starship &>/dev/null; then
    msg "Bootstraping starship"
    mkdir -p $HOME/.local/bin
    curl -fsSL https://starship.rs/install.sh | sh /dev/stdin -f -b $HOME/.local/bin | awk '/complete the installation/{exit}1'
  fi
fi

# Bootstrap tmux
if command -v tmux >/dev/null 2>&1; then
  if [ ! -f ~/.tmux/plugins/tpm/tpm ]; then
    msg "Installing Tmux Plugin Manager"
    git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
  fi
  msg "Bootstraping Tmux Plugin Manager"
  ~/.tmux/plugins/tpm/scripts/install_plugins.sh
else
  msg "tmux not found. Skip bootstrap."
fi

# Bootstrap neovim
if command -v nvim >/dev/null 2>&1; then
  # Install vim-plug
  vimplug="${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim
  if [ ! -f "$vimplug" ]; then
    msg "Installing vim-plug"
    curl -fLo "$vimplug" --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  fi
  msg "Bootstraping vim-plug"
  nvim --headless +'PlugInstall --sync' +qa
else
  msg "nvim not found. Skip bootstrap."
fi

# Bootstrap tig
mkdir -p ~/.local/share/tig/
